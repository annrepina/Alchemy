#include "AlchemicalUserInterface.h"

// Возможно добавить меню "Перейти в инструкцию"
string AlchemicalUserInterface::listOfMenuItems[TOTAL_NUMBER_OF_MENU_ITEMS] = {
	"Выберите действие : ",
	"Создание зелий",
	"Покупка ингредиентов",
	"Продажа ингредиентов",
	"Продажа зелий",
	"Работа с таблицами"
};

AlchemicalUserInterface::AlchemicalUserInterface()
{
	this->alchemist = new Alchemist();
}

void AlchemicalUserInterface::launchMainLoop()
{
	fillActionMenuMap();

	// Возможно раскоментировать
	//setXCoord();

	printTitle();

	printExitButton();

	printMainMenu();

	this->func = std::bind(&UserInterface::isMenuChoiceFalse, this, _1);

	checkMenuChoice();

	eraseScreenAfterTitle();

	switch (this->keyBoard->getPressedKey())
	{
	case VK_1: case VK_NUMPAD1:
	{
		doAlchemy();
	}
	break;

	case VK_2: case VK_NUMPAD2:
	{
		cout << "\nИнструкция" << endl;
	}
	break;

	case VK_ESCAPE:
	{
		cout << "\nДо скорой встречи!" << endl;
	}
	break;
	}
}

void AlchemicalUserInterface::fillActionMenuMap()
{
	// Стартовый ключ
	int startIndex = ACTION_MENU_Y_COORD;

	// Заполняем ассоциативный массив
	for (int i = 0; i < NUMBER_OF_MAIN_MENU_ITEMS; ++i, ++startIndex)
	{
		this->actionMenu.emplace(startIndex, listOfMenuItems[i]);
	}
}

void AlchemicalUserInterface::doAlchemy()
{
	//printContinueGameMenu();

// !!! Стерла всё, т.к. инфа будет парситься !!!

//cout << "Хотите продолжить последнюю игру или создать новую?" << endl
//	<< "1 - Продолжить игру" << endl
//	<< "2 - Создать новую игру" << endl;

//func = std::bind(&UserInterface::isContinueGameFalse, this, _1);

//checkMenuChoice();

// !!! Нужно спарсить
// Имя алхимика





// !!! СПАРСИЛИ !!!

// если имя пользователя пустое
	if ("" == this->alchemist->getName())
	{
		// имя пользователя
		string name;

		cout << "Введите ваше имя: ";

		cin >> name;

		this->alchemist->setName(name);
	}



	//string name = "Андрей";

	eraseScreenAfterTitle();

	//this->alchemist->setName(name);

	this->alchemist->print();

	printActionMenu();
}

void AlchemicalUserInterface::printTitle()
{
	this->setXCoord();

	printFramedText(title, TITLE_Y_COORD, titleXCoord);
}

void AlchemicalUserInterface::printExitButton()
{
	// Текст кнопки
	string exit = "ESC - выход";

	// координата печати кнопки
	int xCoord = calculateConsoleWidth() - exit.length();

	// Печать кнопки
	cout << goToXY(EXIT_Y_COORD, xCoord) << exit << endl;
}

void AlchemicalUserInterface::printMainMenu()
{
	cout << "\nВыберите действие: " << endl
		<< "1 - Алхимичить" << endl
		<< "2 - Ознакомиться с инструкцией к программе" << endl/*
		<< "ESC - выход" << endl*/;
}

void AlchemicalUserInterface::printInstructions()
{
	eraseScreenAfterTitle();

	cout << "Инструкции к программе \"Зельеварение\"" << endl
		<< "0 - назад"
		<< "ESC - выход";
}

void UserInterface::printActionMenu()
{
	// Изменяем цвет фона на серый
	cout << changeBackgroundColorsExtra(R_DECIMAL_GREY, G_DECIMAL_GREY, B_DECIMAL_GREY);

	// Стартовый индекс печати главного меню действий
	int startIndex = 0;

	cout << listOfMenuItems[startIndex++] << endl;
	//cout << "Выберите действие: " << endl;

	cout << resetColorParams();

	// Печатаем пункты меню
	for (int i = startIndex; i < NUMBER_OF_MAIN_MENU_ITEMS; ++i)
	{
		cout << listOfMenuItems[i] << endl;
	}
	//<< "Создание зелий" << endl
	//<< "Покупка ингредиентов" << endl
	//<< "Продажа ингредиентов" << endl
	//<< "Продажа зелий" << endl
	//<< "Работа с таблицей" << endl;

	cout << goToXY(ACTION_MENU_Y_COORD, 1);

	// Запоминаем текущие координаты курсора
	this->currentXCursorCoord = 1;
	this->currentYCursorCoord = ACTION_MENU_Y_COORD;

	this->func = std::bind(&UserInterface::isArrowKeyFalse, this, _1);

	// Флаг для выхода из цикла do-while
	bool exitFlag = false;

	do {
		// Проверяем нажатую кнопку
		checkMenuChoice();

		switch (this->keyBoard->getPressedKey())
		{
		case VK_UP:
		{
			// Проверяем стрелочки
			checkArrowsChoice(exitFlag, ACTION_MENU_Y_COORD, VK_UP);

			//if (ACTION_MENU_Y_COORD == this->currentYCursorCoord)
			//{
			//	exitFlag = true;
			//}
			//else
			//{
			//	cout << goToXY(--this->currentYCursorCoord, 1);
			//	// Изменяем цвет фона на серый
			//	cout << changeBackgroundColorsExtra(R_DECIMAL_GREY, G_DECIMAL_GREY, B_DECIMAL_GREY);
			//	// печатаем главное меню действий
			//	for (int i = currentYCursorCoord; i < ACTION_MENU_Y_COORD + NUMBER_OF_MAIN_MENU_ITEMS; ++i)
			//	{
			//		if (i == currentYCursorCoord)
			//		{
			//			// Изменяем цвет фона на серый
			//			cout << changeBackgroundColorsExtra(R_DECIMAL_GREY, G_DECIMAL_GREY, B_DECIMAL_GREY);
			//			// Печатаем пункт меню
			//			cout << actionMenu[i] << endl; 
			//			// Сбрасываем параметры текста
			//			cout << resetColorParams();
			//		}
			//		else 
			//			// Печатаем пункт меню
			//			cout << actionMenu[i] << endl;
			//	}
			//	cout << goToXY(currentYCursorCoord, 1);
			//	// Сбрасываем флаг
			//	exitFlag = false;
			// }	
		}
		break;

		case VK_DOWN:
		{
			// Проверяем стрелочки
			checkArrowsChoice(exitFlag, ACTION_MENU_Y_COORD + NUMBER_OF_MAIN_MENU_ITEMS - 1, VK_DOWN);
		}
		break;

		case VK_RETURN:
		{
			if (ACTION_MENU_Y_COORD == this->currentYCursorCoord)
			{
				exitFlag = false;
			}

			else
				// !! Осуществление действий
			{

			}
		}
		break;

		case VK_ESCAPE:
			break;
		}
	} while (false == exitFlag);
}

bool UserInterface::isContinue(int key)
{
	return VK_RETURN != key && VK_ESCAPE != key;
}

bool UserInterface::isArrowKeyFalse(int key)
{
	bool res = VK_UP != key && VK_DOWN != key && VK_ESCAPE != key && VK_RETURN != key;

	return res;
}

void UserInterface::setXCoord()
{
	titleXCoord = (calculateConsoleWidth() / 2) - (title.length() / 2);
}


void UserInterface::checkArrowsChoice(bool& exitFlag, int BorderYCoord, int keyCode)
{
	// Сбрасываем флаг
	exitFlag = false;

	// если граничная координата не равна текущей
	if (BorderYCoord != this->currentYCursorCoord)
	{
		// Если кнопка вниз
		if (VK_DOWN == keyCode)
		{
			// Печатаем пункт меню без выделения
			cout << actionMenu[currentYCursorCoord] << endl;

			// увеличиваем координаты
			++this->currentYCursorCoord;
		}
		// если кнопка вверх
		else
			// уменьшаем координаты
			--this->currentYCursorCoord;

		// Переходим по координатам
		cout << goToXY(this->currentYCursorCoord, 1);

		// печатаем главное меню действий
		for (int i = currentYCursorCoord; i < ACTION_MENU_Y_COORD + NUMBER_OF_MAIN_MENU_ITEMS; ++i)
		{
			if (i == currentYCursorCoord)
			{
				printTextWithBackground(actionMenu[i], R_DECIMAL_GREY, G_DECIMAL_GREY, B_DECIMAL_GREY);
			}

			else
				// Печатаем пункт меню
				cout << actionMenu[i] << endl;
		}

		// Возвращаемся в координаты
		cout << goToXY(currentYCursorCoord, 1);
	}
}

